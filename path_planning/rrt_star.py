from isaacsim.robot_motion.motion_generation.path_planning_interface import PathPlanner
import numpy as np
class RRTStar(PathPlanner):
    def __init__(self, robot_description_path, urdf_path, rrt_config_path, end_effector_frame_name, cost_function=None):
        self.robot_description_path = robot_description_path
        self.urdf_path = urdf_path
        self.rrt_config_path = rrt_config_path
        self.end_effector_frame_name = end_effector_frame_name
        self.cost_function = cost_function if cost_function is not None else self.default_cost_function
        
    #params: ctive_joint_positions (np.array) – current positions of joints specified by get_active_joints()
    #watched_joint_positions (np.array) – current positions of joints specified by get_watched_joints()
    def compute_path(self, active_joint_positions, watched_joint_positions):
        # if self.target_not_defined():
        #     return None
        
        path = anglelist = np.load("C:\\Users\\volle\\Downloads\\joint_angles.npy") 

        bp = np.array([ [[0.0, 0.02060980807242597, -0.5006793333455833, -0.09482265540819582, -1.3517011377454233, 1.2077550236929053, 0.3428104945330554], [0.0, 0.01818682507699683, -0.4427871537116385, -0.07283368982471819, -1.356063862810941, 1.2099831485340171, 0.4148151119989396], [0.0, 0.01576384208156769, -0.3848949740776937, -0.050844724241240556, -1.3604265878764588, 1.212211273375129, 0.48681972946482377], [0.0, 0.013340859086138551, -0.3270027944437488, -0.028855758657762923, -1.3647893129419764, 1.2144393982162407, 0.558824346930708], [0.0, 0.010917876090709412, -0.269110614809804, -0.006866793074285296, -1.3691520380074942, 1.2166675230573527, 0.6308289643965922], [0.0, 0.008494893095280273, -0.21121843517585914, 0.015122172509192344, -1.3735147630730118, 1.2188956478984645, 0.7028335818624765], [0.0, 0.006071910099851134, -0.1533262555419143, 0.03711113809266997, -1.3778774881385296, 1.2211237727395763, 0.7748381993283606], [0.0, 0.003648927104421995, -0.09543407590796948, 0.0591001036761476, -1.3822402132040472, 1.223351897580688, 0.8468428167942448], [0.0, 0.001225944108992856, -0.037541896274024655, 0.08108906925962522, -1.386602938269565, 1.2255800224217999, 0.9188474342601289], [0.0, -0.001197038886436283, 0.020350283359920174, 0.10307803484310285, -1.3909656633350826, 1.2278081472629117, 0.9908520517260131], [0.0, -0.003620021881865422, 0.07824246299386506, 0.1250670004265805, -1.3953283884006005, 1.2300362721040237, 1.0628566691918975], [0.0, -0.006043004877294561, 0.13613464262780994, 0.14705596601005816, -1.399691113466118, 1.2322643969451355, 1.1348612866577816], [0.0, -0.0084659878727237, 0.19402682226175472, 0.16904493159353576, -1.404053838531636, 1.2344925217862472, 1.2068659041236658], [0.0, -0.010888970868152839, 0.2519190018956996, 0.19103389717701344, -1.4084165635971535, 1.236720646627359, 1.2788705215895502], [0.0, -0.013311953863581978, 0.3098111815296444, 0.213022862760491, -1.4127792886626713, 1.2389487714684708, 1.3508751390554343], [0.0, -0.015734936859011117, 0.36770336116358926, 0.2350118283439687, -1.417142013728189, 1.2411768963095826, 1.4228797565213185], [0.0, -0.018157919854440256, 0.42559554079753403, 0.25700079392744624, -1.4215047387937068, 1.2434050211506946, 1.4948843739872026], [0.0, -0.020580902849869395, 0.4834877204314789, 0.278989759510924, -1.4258674638592244, 1.2456331459918064, 1.566888991453087], [0.0, -0.023003885845298534, 0.5413799000654237, 0.3009787250944015, -1.430230188924742, 1.2478612708329182, 1.638893608918971], [0.0, -0.025426868840727673, 0.5992720796993685, 0.3229676906778792, -1.4345929139902598, 1.25008939567403, 1.7108982263848553]]
        ])
       
        return bp
    def get_active_joints(self):
        return ["panda_joint1", "panda_joint2", "panda_joint3", "panda_joint4", "panda_joint5", "panda_joint6", "panda_joint7"]

    def set_robot_base_pose(self, robot_position, robot_orientation):
        pass

    def set_max_iterations(self, max_iter: int):
        pass

    def set_random_seed(self, random_seed: int):
        pass

    def set_param(self, param_name: str, value):
        pass

    def default_cost_function(self, from_node, to_node):
        # Standardkostenfunktion (z. B. euklidische Distanz)
        return np.linalg.norm(to_node - from_node)

    
